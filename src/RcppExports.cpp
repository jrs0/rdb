// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// test_cpp
int test_cpp(int thing);
RcppExport SEXP _rdb_test_cpp(SEXP thingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type thing(thingSEXP);
    rcpp_result_gen = Rcpp::wrap(test_cpp(thing));
    return rcpp_result_gen;
END_RCPP
}
// print_sql_query
void print_sql_query(const Rcpp::CharacterVector& config_path);
RcppExport SEXP _rdb_print_sql_query(SEXP config_pathSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type config_path(config_pathSEXP);
    print_sql_query(config_path);
    return R_NilValue;
END_RCPP
}
// get_patient_records
Rcpp::List get_patient_records(const Rcpp::CharacterVector& config_path);
RcppExport SEXP _rdb_get_patient_records(SEXP config_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type config_path(config_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(get_patient_records(config_path));
    return rcpp_result_gen;
END_RCPP
}
// make_acs_dataset
Rcpp::List make_acs_dataset(const Rcpp::CharacterVector& config_path);
RcppExport SEXP _rdb_make_acs_dataset(SEXP config_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type config_path(config_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(make_acs_dataset(config_path));
    return rcpp_result_gen;
END_RCPP
}
// get_flat_codes
Rcpp::List get_flat_codes(const Rcpp::CharacterVector& codes_file_path);
RcppExport SEXP _rdb_get_flat_codes(SEXP codes_file_pathSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type codes_file_path(codes_file_pathSEXP);
    rcpp_result_gen = Rcpp::wrap(get_flat_codes(codes_file_path));
    return rcpp_result_gen;
END_RCPP
}
// dump_groups
Rcpp::List dump_groups(const Rcpp::CharacterVector& file);
RcppExport SEXP _rdb_dump_groups(SEXP fileSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::CharacterVector& >::type file(fileSEXP);
    rcpp_result_gen = Rcpp::wrap(dump_groups(file));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_rdb_test_cpp", (DL_FUNC) &_rdb_test_cpp, 1},
    {"_rdb_print_sql_query", (DL_FUNC) &_rdb_print_sql_query, 1},
    {"_rdb_get_patient_records", (DL_FUNC) &_rdb_get_patient_records, 1},
    {"_rdb_make_acs_dataset", (DL_FUNC) &_rdb_make_acs_dataset, 1},
    {"_rdb_get_flat_codes", (DL_FUNC) &_rdb_get_flat_codes, 1},
    {"_rdb_dump_groups", (DL_FUNC) &_rdb_dump_groups, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_rdb(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
